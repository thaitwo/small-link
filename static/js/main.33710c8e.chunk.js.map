{"version":3,"sources":["components/Button.js","components/Searchbox.js","App.js","serviceWorker.js","index.js"],"names":["Button","className","type","React","Component","Searchbox","props","state","value","shortLink","clipboard","Clipboard","handleChange","bind","shortenLink","alertLinkCopied","event","this","setState","target","Noty","layout","progressBar","theme","text","timeout","show","preventDefault","axios","post","url","then","response","data","hashid","document","querySelector","classList","remove","catch","error","console","log","onSubmit","id","placeholder","onChange","onClick","data-clipboard-target","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qZAaeA,G,uLARX,OACE,yBAAKC,UAAU,kBACb,4BAAQA,UAAU,SAASC,KAAK,UAAhC,gB,GAJaC,IAAMC,Y,iBCgFZC,G,oCAxEb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAO,GACPC,UAAW,IAEb,EAAKC,UAAY,IAAIC,IAAU,qBAC/B,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,gBAAkB,EAAKA,gBAAgBF,KAArB,gBATN,E,0EAcNG,GACXC,KAAKC,SAAS,CACZV,MAAOQ,EAAMG,OAAOX,U,wCAOtB,IAAIY,IAAK,CACPC,OAAQ,YACRC,aAAa,EACbC,MAAO,OACPC,KAAM,uBACNtB,KAAM,UACNuB,QAAS,SACRC,S,kCAKOV,GAAQ,IAAD,OACjBA,EAAMW,iBAENC,IAAMC,KAAK,6BAA8B,CACvCC,IAAKb,KAAKV,MAAMC,QAEjBuB,KAAK,SAACC,GACL,EAAKd,SAAS,CACZT,UAAU,mBAAD,OAAqBuB,EAASC,KAAKC,UAI9CC,SAASC,cAAc,oBAAoB5B,MAAQ,EAAKD,MAAME,UAG9D0B,SAASC,cAAc,qBAAqBC,UAAUC,OAAO,eAE9DC,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,O,+BAM5B,OACE,6BACE,0BAAMG,SAAU1B,KAAKH,aACnB,yBAAKb,UAAU,yBACb,2BAAO2C,GAAG,kBAAkB3C,UAAU,kBAAkBC,KAAK,OAAO2C,YAAY,YAAYC,SAAU7B,KAAKL,eAC3G,4BAAQX,UAAU,6BAA6B8C,QAAS9B,KAAKF,gBAAiBiC,wBAAsB,oBAApG,cAEF,kBAAC,EAAD,Y,GAlEc7C,IAAMC,Y,YCWf6C,MAhBf,WAGE,OACE,yBAAKhD,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,eACb,wBAAIA,UAAU,eAAd,cACA,uBAAGA,UAAU,kBAAb,kCACA,kBAAC,EAAD,UCFUiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASrB,SAASsB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC,iB","file":"static/js/main.33710c8e.chunk.js","sourcesContent":["import React from 'react';\nimport '../scss/Button.scss';\n\nclass Button extends React.Component {\n  render() {\n    return (\n      <div className=\"Button-wrapper\">\n        <button className=\"Button\" type=\"submit\" >Shorten</button>\n      </div>\n    )\n  }\n}\n\nexport default Button;","import React from 'react';\nimport axios from 'axios';\nimport Clipboard from 'clipboard';\nimport Button from './Button.js';\nimport Noty from 'noty';\nimport 'noty/lib/noty.css';\nimport 'noty/lib/themes/nest.css';\nimport '../scss/Searchbox.scss';\nimport '../scss/states.scss';\n\nclass Searchbox extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      value: '',\n      shortLink: ''\n    }\n    this.clipboard = new Clipboard('.clipboard-button');\n    this.handleChange = this.handleChange.bind(this);\n    this.shortenLink = this.shortenLink.bind(this);\n    this.alertLinkCopied = this.alertLinkCopied.bind(this);\n  }\n\n\n  // Update input value as user types\n  handleChange(event) {\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n\n  // Create and display alert that link has been copied\n  alertLinkCopied() {\n    new Noty({\n      layout: 'topCenter',\n      progressBar: false,\n      theme: 'nest',\n      text: 'Link has been copied',\n      type: 'success',\n      timeout: '1500'\n    }).show();\n  }\n\n\n  // Make API call to get shortened link\n  shortenLink(event) {\n    event.preventDefault();\n\n    axios.post('https://rel.ink/api/links/', {\n      url: this.state.value\n    })\n    .then((response) => {\n      this.setState({\n        shortLink: `https://rel.ink/${response.data.hashid}`\n      });\n\n      // Update the value of input to the shortened link\n      document.querySelector('.Searchbox-input').value = this.state.shortLink;\n\n      // Display 'Copy link' button only once a link has been shortened\n      document.querySelector('.clipboard-button').classList.remove('is-hidden');\n    })\n    .catch(error => console.log(error))\n  }\n\n\n  // Render the form for users to input link\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.shortenLink}>\n          <div className=\"Searchbox-input-group\">\n            <input id=\"Searchbox-input\" className=\"Searchbox-input\" type=\"text\" placeholder=\"Enter URL\" onChange={this.handleChange} />\n            <button className=\"clipboard-button is-hidden\" onClick={this.alertLinkCopied} data-clipboard-target=\"#Searchbox-input\">Copy link</button>\n          </div>\n          <Button />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Searchbox;","import React from 'react';\nimport Searchbox from './components/Searchbox.js';\nimport './scss/text-styles.scss';\nimport './scss/App.scss';\n\nfunction App() {\n  \n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"App-content\">\n          <h2 className=\"text-header\">Small Link</h2>\n          <p className=\"text-subheader\">A simple way to shorten links.</p>\n          <Searchbox />\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}